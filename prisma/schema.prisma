// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
    PENDING
    COMPLETED
    PAID
    CANCELED

}


model Role {
  id  String @id @default(uuid())
  name String
  isActive Boolean @default(true)

  // RELACIONES
  User User[]
}


model User {
  id  String @id @default(uuid())
  email String  @unique
  name  String
  phone String
  password String
  isActive Boolean @default(true)


// RELACIONES
  role Role @relation(fields: [roleId],references: [id])  
  roleId String 

  warehouse Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String? 

} 

model Warehouse {
    id  String @id @default(uuid())
    name String
   isActive Boolean @default(true) 

  // RELACIONES
   User User[]

   Product Product[]
}

model Provider {
    id  String @id @default(uuid())
    name String
    address String
   isActive Boolean @default(true) 

   Product Product[]
}

model Product {
  id  String @id @default(uuid())
  name String
  price Float
  image String?
  isActive Boolean @default(true) 

// RELACIONES
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String

  provider Provider? @relation(fields: [providerId],references: [id])
  providerId String?

  Stock Stock[]

  OrderItem OrderItem[]
}

model Stock {
   id  String @id @default(uuid())
   quantity Int
   commit Int
   isActive Boolean @default(true) 
 
 //RELACIONES
  product Product @relation(fields: [productId], references: [id])
  productId String
}
model Order {
    id  String @id @default(uuid())
    status Status
    isActive Boolean @default(true)

 //RELACIONES
    OrderItems OrderItem[]
}


model OrderItem {
    id  String @id @default(uuid())
    quantity Int
    price Float
    isActive Boolean @default(true)    

    // RELACIONES
  product Product @relation(fields: [productId], references: [id])
  productId String 

  order Order @relation(fields: [orderId],references: [id])
  orderId String
}

